import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../../app/store"
import { fetchCount } from "./counterAPI"

export interface CounterState {
  value: number
  status: "idle" | "loading" | "failed",
  byId: Object
}

const initialState: CounterState = {
  value: 0,
  status: "idle",
  byId: {}
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const fetchTaskActivities = createAsyncThunk('counter/fetchActivities', async (arg, thunkAPI) => {},
  { getPendingMeta({ arg, requestId }, { getState, extra }){
    return {
   
    offline: {
        effect: { url: 'http://httpstat.us/500', method: 'POST', 
        body: JSON.stringify({
          title: 'foo',
          body: 'bar',
          userId: 1,
        }),
        headers: {
          'Content-type': 'application/json; charset=UTF-8',
        }, },
        // action to dispatch when effect succeeds:
        commit: { type: 'FETCH_ACTIVITIES_COMMIT', meta: { requestId } },
        // action to dispatch if network action fails permanently:
        rollback: { type: 'FETCH_ACTIVITIES_ROLLBACK', meta: { requestId } }
    }
  }}})

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
      increment: {
        reducer: (state) =>  {state.value += 1} ,
        prepare: (value?: number) => ({ payload: value || 2 })
      },
      decrement: {
        reducer: (state) =>  {state.value -= 1} ,
        prepare: (value?: number) => ({ payload: value || 2 })
      },
      incrementByAmount: {
        reducer: (state, action: PayloadAction<number>) =>  {state.value += action.payload} ,
        prepare: (value?: number) => {
          return {
            payload: value || 2
          }
        } 
      }
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed"
      })
      .addCase(fetchTaskActivities.pending, (state, action) => {
        state.status = 'loading'
    }).addCase('FETCH_ACTIVITIES_COMMIT', (state, action) => {
        // action.payload.forEach(activity => state.byId[activity.id] = activity)
        console.log('action ', action)
        state.byId = {}
       
    }).addCase('FETCH_ACTIVITIES_ROLLBACK', (state, action) => {
        state.byId = {}
        state.status = 'failed'
    })
  },
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions
console.log(incrementByAmount(2))
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }
export default counterSlice.reducer
